/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package continuitytest;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.concurrent.ConcurrentLinkedQueue;

/**
 *
 * @author Chaurasia
 */
public class Main extends javax.swing.JFrame {

    public ConcurrentLinkedQueue<ValetParking> ValetLogObject = new ConcurrentLinkedQueue<ValetParking>();
    HashMap<String, Object> XXS = new HashMap();
    HashMap<String, Object> XS = new HashMap();
    HashMap<String, Object> M = new HashMap();
    HashMap<String, Object> L = new HashMap();
    HashMap<String, Object> XL = new HashMap();
    HashMap<String, Object> XXL = new HashMap();
    HashMap<String, Object> S = new HashMap();
    HashMap<String, Object> ParkingMap = new HashMap();
    int MaxSize = 2;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        appendLog("Program Started ");
    }

    public void backUpDaemon() {

        Thread daemonProcedureThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {

                    while (true) {
                        if (ValetLogObject.isEmpty()) {

                            Thread.sleep(5000);

                        } else {
                            ValetParking str;
                            System.out.println("Reading Data  ");

                            while ((str = ValetLogObject.poll()) != null) {

                            }
                        }
                    }

                } catch (Exception e) {

                } finally {

                    System.out.println("Daemon Thread exiting"); //never called
                }
            }
        }, "Daemon-Procedure-Thread");

        daemonProcedureThread.setDaemon(true); //making this thread daemon
        daemonProcedureThread.start();

// TODO add your handling code here:
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dp = new javax.swing.JDesktopPane();
        viewPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        menuNewVehiclePark = new javax.swing.JMenuItem();
        menuSearchExistingVehicle = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        menuSettings = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        viewPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Process Console Messages"));

        console.setColumns(20);
        console.setRows(5);
        jScrollPane1.setViewportView(console);

        javax.swing.GroupLayout viewPanelLayout = new javax.swing.GroupLayout(viewPanel);
        viewPanel.setLayout(viewPanelLayout);
        viewPanelLayout.setHorizontalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
        );
        viewPanelLayout.setVerticalGroup(
            viewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        dp.add(viewPanel);
        viewPanel.setBounds(20, 120, 240, 240);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        menuNewVehiclePark.setMnemonic('o');
        menuNewVehiclePark.setText("Park Vehicle");
        menuNewVehiclePark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewVehicleParkActionPerformed(evt);
            }
        });
        fileMenu.add(menuNewVehiclePark);

        menuSearchExistingVehicle.setMnemonic('s');
        menuSearchExistingVehicle.setText("Search");
        menuSearchExistingVehicle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSearchExistingVehicleActionPerformed(evt);
            }
        });
        fileMenu.add(menuSearchExistingVehicle);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Out Vehicle");
        fileMenu.add(saveAsMenuItem);

        menuSettings.setText("Settings");
        menuSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSettingsActionPerformed(evt);
            }
        });
        fileMenu.add(menuSettings);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(dp, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dp, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    public int queryNumber(String plateNumber) {
        boolean isinLaps = ParkingMap.containsKey(plateNumber);
        if (isinLaps == false) {

            return -1;
            // Thread.sleep(5000);
            //   isProcessed.put(c.getChestno().trim(), c.getChestno().trim());
            //   ProcedureCallsOnline.add(c);

        } else {
            return 0;
        }
    }

    public void trySaveinBlockXS(HashMap XS, String plate, String hashName) {
        int curSize = queryHashMap(XS);
        if (curSize != -1) {
            //it has space to Park
            //Park and Update HashMap 
            //Send Console Message

            //query if is not parked
            boolean isParked = ParkingMap.containsKey(plate);
            if (isParked == false) {

                ParkingMap.put(plate, hashName);
                XS.put(plate, hashName);

                ConsoleMsg(hashName + " BLOCK HAS CAR  " + plate);

            } else {
                System.out.println("Is Parked in OTher Block");
            }

        } else {
            //Space is Full Search in Next Block 
            System.out.println(hashName + "XS BLOCK IS FULL");
            ConsoleMsg(hashName + " BLOCK CANNOT PARK  " + plate);
        }
    }

    public void tryRemoveinBlockXS(HashMap XS, String plate) {
        int curSize = queryHashMap(XS);
        if (curSize != -1) {
            //it has space to Park
            //Park and Update HashMap 
            //Send Console Message

            //query if is not parked
            boolean isParked = ParkingMap.containsKey(plate);
            if (isParked == true) {
                Object o = (Object) plate;
                XS.remove(o);
                ParkingMap.remove(o);
                ConsoleMsg("" + " BLOCK HAS REMOVED CAR  " + plate);

            } else {

            }

        } else {

        }
    }

    public int queryAvailableSpace(int type, String plate) {

        switch (type) {
            case 1:

                // XXS -> Can Put XS|S|M|L|XL
                //check if XS is not full 
                trySaveinBlockXS(XS, plate, "XS");
                trySaveinBlockXS(S, plate, "S");
                trySaveinBlockXS(M, plate, "M");
                trySaveinBlockXS(L, plate, "L");
                trySaveinBlockXS(XL, plate, "XL");
                if (queryNumber(plate) == -1) {
                    ConsoleMsg("Sorry the Parking is Full");
                } else {

                    Object o = (Object) plate;
                    Object value = ParkingMap.get(o);
                    ConsoleMsg("Car Parked : Location == >" + String.valueOf(value));
                }

                break;

            case 2:
                //XS type
                // XS -> Can Put XS|S|M|L|XL
                //check if XS is not full 
                trySaveinBlockXS(XS, plate, "XS");
                trySaveinBlockXS(S, plate, "S");
                trySaveinBlockXS(M, plate, "M");
                trySaveinBlockXS(L, plate, "L");
                trySaveinBlockXS(XL, plate, "XL");
                if (queryNumber(plate) == -1) {
                    ConsoleMsg("Sorry the Parking is Full");
                } else {

                    Object o = (Object) plate;
                    Object value = ParkingMap.get(o);
                    ConsoleMsg("Car Parked : Location == >" + String.valueOf(value));
                }
                break;

            case 3:

                //M type
                // M -> Can Put XS|S|M|L|XL
                //check if XS is not full 
                trySaveinBlockXS(M, plate, "M");
                trySaveinBlockXS(L, plate, "L");
                trySaveinBlockXS(XL, plate, "XL");
                if (queryNumber(plate) == -1) {
                    ConsoleMsg("Sorry the Parking is Full");
                } else {

                    Object o = (Object) plate;
                    Object value = ParkingMap.get(o);
                    ConsoleMsg("Car Parked : Location == >" + String.valueOf(value));
                }

                break;
            case 4:

                //L type
                // L -> Can Put XS|S|M|L|XL
                //check if XS is not full 
                trySaveinBlockXS(L, plate, "L");
                trySaveinBlockXS(XL, plate, "XL");
                if (queryNumber(plate) == -1) {
                    ConsoleMsg("Sorry the Parking is Full");
                } else {

                    Object o = (Object) plate;
                    Object value = ParkingMap.get(o);
                    ConsoleMsg("Car Parked : Location == >" + String.valueOf(value));
                }
                break;

            case 5:
//XL type
                // XL -> Can Put XS|S|M|L|XL
                //check if XS is not full 

                trySaveinBlockXS(XL, plate, "XL");
                if (queryNumber(plate) == -1) {
                    ConsoleMsg("Sorry the Parking is Full");
                } else {

                    Object o = (Object) plate;
                    Object value = ParkingMap.get(o);
                    ConsoleMsg("Car Parked : Location == >" + String.valueOf(value));
                }
                break;
            case 6:

                //XXL type
                // XXL -> Can Put XS|S|M|L|XL
                //check if XS is not full 
                if (queryNumber(plate) == -1) {
                    ConsoleMsg("Sorry the Parking is Full");
                } else {

                    Object o = (Object) plate;
                    Object value = ParkingMap.get(o);
                    ConsoleMsg("Car Parked : Location == >" + String.valueOf(value));
                }
                break;
            case 7:
//S type
                // S -> Can Put XS|S|M|L|XL
                //check if XS is not full 

                trySaveinBlockXS(S, plate, "S");
                trySaveinBlockXS(M, plate, "M");
                trySaveinBlockXS(L, plate, "L");
                trySaveinBlockXS(XL, plate, "XL");
                if (queryNumber(plate) == -1) {
                    ConsoleMsg("Sorry the Parking is Full");
                } else {

                    Object o = (Object) plate;
                    Object value = ParkingMap.get(o);
                    ConsoleMsg("Car Parked : Location == >" + String.valueOf(value));
                }
                break;

            default:
                break;
        }

        return 0;
    }

    public String getCarBlock(String plate) {
        if (queryNumber(plate) == -1) {
            return "DETAILS UNAVAILABLE ";

        } else {
            Object o = (Object) plate;
            Object value = ParkingMap.get(o);
            ConsoleMsg("Car Parked : Location == >" + String.valueOf(value));
            return "Car Parked : Location == >" + String.valueOf(value);
        }
    }

    /*
    On Car Checkout the Parking space is set free the data across all nodes are checked 
     */
    public String freeCarBlock(String plate) {
        if (queryNumber(plate) == -1) {
            return "DETAILS UNAVAILABLE ";

        } else {
            Object o = (Object) plate;
            tryRemoveinBlockXS(L, plate);
            tryRemoveinBlockXS(XS, plate);
            tryRemoveinBlockXS(S, plate);
            tryRemoveinBlockXS(M, plate);
            tryRemoveinBlockXS(L, plate);
            tryRemoveinBlockXS(XL, plate);

            return "Car Parked : Location is Now Free  == >" + String.valueOf(plate);
        }
    }

    public int queryHashMap(HashMap hM) {

        //Every Block has a max capacity 
        //here all block max capacity is set to 2 
        if (hM.size() >= MaxSize) {
            return -1;
        } else {

            return hM.size();
        }

    }

    public HashMap<String, Object> getXXS() {
        return XXS;
    }

    public void setXXS(HashMap<String, Object> XXS) {
        this.XXS = XXS;
    }

    public HashMap<String, Object> getXS() {
        return XS;
    }

    public void setXS(HashMap<String, Object> XS) {
        this.XS = XS;
    }

    public HashMap<String, Object> getM() {
        return M;
    }

    public void setM(HashMap<String, Object> M) {
        this.M = M;
    }

    public HashMap<String, Object> getL() {
        return L;
    }

    public void setL(HashMap<String, Object> L) {
        this.L = L;
    }

    public HashMap<String, Object> getXL() {
        return XL;
    }

    public void setXL(HashMap<String, Object> XL) {
        this.XL = XL;
    }

    public HashMap<String, Object> getXXL() {
        return XXL;
    }

    public void setXXL(HashMap<String, Object> XXL) {
        this.XXL = XXL;
    }

    public HashMap<String, Object> getS() {
        return S;
    }

    public void setS(HashMap<String, Object> S) {
        this.S = S;
    }

    public HashMap<String, Object> getParkingMap() {
        return ParkingMap;
    }

    public void setParkingMap(HashMap<String, Object> ParkingMap) {
        this.ParkingMap = ParkingMap;
    }

    public int getMaxSize() {
        return MaxSize;
    }

    public void setMaxSize(int MaxSize) {
        this.MaxSize = MaxSize;
    }

    /*
    Console Msg is Program alerts and Information for the users 
     */
    public void ConsoleMsg(String msg) {

        console.append("\n" + msg);
        console.setCaretPosition(console.getDocument().getLength());
        appendLog(msg + "  " + "\t" + getCurrentTimeStamp());
    }

    /*
    Get current date and time human readable
     */
    public static String getCurrentTimeStamp() {
        SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//dd/MM/yyyy
        Date now = new Date();
        String strDate = sdfDate.format(now);
        return strDate;
    }

    /*
    Logging all Input and output to logfile 
     */
    public void appendLog(String msg) {
        try {
            PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("myLog.txt", true)));
            out.println(msg);
            out.close();
        } catch (IOException e) {
            //exception handling left as an exercise for the reader
        }
    }

    /*
    
     */

    private void menuNewVehicleParkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewVehicleParkActionPerformed

        EntryModule eM = new EntryModule(this);
        dp.add(eM);
        eM.show();
        // TODO add your handling code here:
    }//GEN-LAST:event_menuNewVehicleParkActionPerformed

    private void menuSearchExistingVehicleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSearchExistingVehicleActionPerformed

        
        CarSearch cS = new CarSearch(this);
        dp.add(cS);
        cS.show();
        // TODO add your handling code here:
    }//GEN-LAST:event_menuSearchExistingVehicleActionPerformed

    private void menuSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSettingsActionPerformed

        
        /*
        Displays Setting Box to set Max container Size
        
        */
        Settings sM = new Settings(this);
        dp.add(sM);
        sM.show();

        // TODO add your handling code here:
    }//GEN-LAST:event_menuSettingsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea console;
    private javax.swing.JDesktopPane dp;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuNewVehiclePark;
    private javax.swing.JMenuItem menuSearchExistingVehicle;
    private javax.swing.JMenuItem menuSettings;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JPanel viewPanel;
    // End of variables declaration//GEN-END:variables

}
